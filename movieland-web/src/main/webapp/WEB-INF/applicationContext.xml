<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/task
                           http://www.springframework.org/task/spring-task.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">
    <mvc:annotation-driven/>
    <task:annotation-driven scheduler="myScheduler"/>
    <task:scheduler id="myScheduler" pool-size="3"/>
    <context:component-scan base-package="edu.eteslenko.movieland.dao"/>
    <context:component-scan base-package="edu.eteslenko.movieland.service"/>
    <context:property-placeholder location="classpath:sqlquery.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:application.properties" ignore-unresolvable="true"/>
    <bean id="baseDataSource"
          class="org.apache.commons.dbcp2.BasicDataSource" lazy-init="true">
        <property name="minEvictableIdleTimeMillis">
            <value>300000</value>
        </property>
        <property name="timeBetweenEvictionRunsMillis">
            <value>60000</value>
        </property>
        <property name="initialSize">
            <value>5</value>
        </property>
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <bean class="java.net.URI" id="dbUrl" lazy-init="true">
        <constructor-arg value="#{systemEnvironment['DATABASE_URL']}"/>
    </bean>
    <bean id="baseDataSourceHeroku"
          class="org.apache.commons.dbcp2.BasicDataSource" lazy-init="true">
        <property name="minEvictableIdleTimeMillis">
            <value>300000</value>
        </property>
        <property name="timeBetweenEvictionRunsMillis">
            <value>60000</value>
        </property>
        <property name="initialSize">
            <value>5</value>
        </property>
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url"
                  value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + ':' + @dbUrl.getPort() + @dbUrl.getPath() }"/>
        <property name="username" value="#{ @dbUrl.getUserInfo().split(':')[0] }"/>
        <property name="password" value="#{ @dbUrl.getUserInfo().split(':')[1] }"/>
    </bean>

    <bean id="dsConnectionFactory" class="org.apache.commons.dbcp2.DataSourceConnectionFactory">
        <constructor-arg>
            <ref bean="#{systemEnvironment['DATABASE_URL']==null ? 'baseDataSource' : 'baseDataSourceHeroku' }"/>
        </constructor-arg>
    </bean>

    <bean id="poolableConnectionFactory" class="org.apache.commons.dbcp2.PoolableConnectionFactory">
        <constructor-arg index="0">
            <ref bean="dsConnectionFactory"/>
        </constructor-arg>
        <constructor-arg index="1">
            <null/>
        </constructor-arg>
        <property name="pool" ref="pool"/>
    </bean>
    <bean id="pool" class="org.apache.commons.pool2.impl.GenericObjectPool">
        <constructor-arg>
            <ref bean="poolableConnectionFactory"/>
        </constructor-arg>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp2.PoolingDataSource"
          depends-on="poolableConnectionFactory">
        <constructor-arg>
            <ref bean="pool"/>
        </constructor-arg>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg><ref bean="dataSource"/></constructor-arg>
    </bean>
    <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg><ref bean="dataSource"/></constructor-arg>
    </bean>
    <bean id="movieSelectAllQuery" class="java.lang.String">
        <constructor-arg
                value="${query.allMovies}"/>
    </bean>
    <bean id="movieSelectThreeRandomQuery" class="java.lang.String">
        <constructor-arg
                value="${query.randomThreeMovies}"/>
    </bean>

    <bean id="genreSelectAllQuery" class="java.lang.String">
        <constructor-arg
                value="${query.allGenres}"/>
    </bean>
    <bean id="movieSelectByGenreQuery" class="java.lang.String">
        <constructor-arg
                value="${query.moviesByGenre}"/>
    </bean>
    <bean id="movieSelectByIdQuery" class="java.lang.String">
        <constructor-arg
                value="${query.movieById}"/>
    </bean>
    <bean id="genreSelectByMovieIdQuery" class="java.lang.String">
        <constructor-arg
                value="${query.genreByMovieId}"/>
    </bean>
    <bean id="countrySelectAllQuery" class="java.lang.String">
        <constructor-arg
                value="${query.allCountries}"/>
    </bean>
    <bean id="countrySelectByMovieIdQuery" class="java.lang.String">
        <constructor-arg
                value="${query.countryByMovieId}"/>
    </bean>
</beans>